CrowdNet(
  (deep_network): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace)
    (4): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace)
    (9): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace)
    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): ReLU(inplace)
    (16): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): ReLU(inplace)
    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (20): ReLU(inplace)
    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (22): ReLU(inplace)
    (23): MaxPool2d(kernel_size=(2, 2), stride=(1, 1), dilation=(1, 1), ceil_mode=False)
    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): ReLU(inplace)
    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): ReLU(inplace)
    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (29): ReLU(inplace)
  )
  (shallow_network): Sequential(
    (0): Conv2d(3, 24, kernel_size=(5, 5), stride=(1, 1), padding=(3, 3))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(5, 5), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
    (3): Conv2d(24, 24, kernel_size=(5, 5), stride=(1, 1), padding=(3, 3))
    (4): ReLU()
    (5): MaxPool2d(kernel_size=(5, 5), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
    (6): Conv2d(24, 24, kernel_size=(5, 5), stride=(1, 1), padding=(3, 3))
    (7): ReLU()
    (8): MaxPool2d(kernel_size=(5, 5), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
  )
  (conv1d): Conv2d(536, 1, kernel_size=(1, 1), stride=(1, 1))
)
2018-04-09
== epoch 1 ==
CrowdNet(
  (deep_network): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace)
    (4): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace)
    (9): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace)
    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): ReLU(inplace)
    (16): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): ReLU(inplace)
    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (20): ReLU(inplace)
    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (22): ReLU(inplace)
    (23): MaxPool2d(kernel_size=(2, 2), stride=(1, 1), dilation=(1, 1), ceil_mode=False)
    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): ReLU(inplace)
    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): ReLU(inplace)
    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (29): ReLU(inplace)
  )
  (shallow_network): Sequential(
    (0): Conv2d(3, 24, kernel_size=(5, 5), stride=(1, 1), padding=(3, 3))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(5, 5), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
    (3): Conv2d(24, 24, kernel_size=(5, 5), stride=(1, 1), padding=(3, 3))
    (4): ReLU()
    (5): MaxPool2d(kernel_size=(5, 5), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
    (6): Conv2d(24, 24, kernel_size=(5, 5), stride=(1, 1), padding=(3, 3))
    (7): ReLU()
    (8): MaxPool2d(kernel_size=(5, 5), stride=(2, 2), dilation=(1, 1), ceil_mode=False)
  )
  (conv1d): Conv2d(536, 1, kernel_size=(1, 1), stride=(1, 1))
)
2018-04-09
== epoch 1 ==
MSE Loss : 9805.553741589189
MAE Metric : 7.474033877253532
== epoch 2 ==
MSE Loss : 280.42801880836487
MAE Metric : 5.984983451664448
== epoch 3 ==
MSE Loss : 228.83671288192272
MAE Metric : 5.235383294522762
== epoch 4 ==
MSE Loss : 201.55746926367283
MAE Metric : 5.02629891782999
== epoch 5 ==
MSE Loss : 180.73601585626602
MAE Metric : 5.030976563692093
== epoch 6 ==
MSE Loss : 164.59008472412825
MAE Metric : 4.74986869096756
== epoch 7 ==
MSE Loss : 151.6357104331255
MAE Metric : 4.729161329567432
== epoch 8 ==
MSE Loss : 144.45554134994745
MAE Metric : 4.779196672141552
== epoch 9 ==
MSE Loss : 131.67480017989874
MAE Metric : 4.8019149005413055
== epoch 10 ==
MSE Loss : 124.94597084075212
MAE Metric : 4.7679401859641075
== epoch 11 ==
MSE Loss : 117.22319113463163
MAE Metric : 4.81095290184021
== epoch 12 ==
MSE Loss : 109.8101065531373
MAE Metric : 4.659949831664562
== epoch 13 ==
MSE Loss : 109.45173673704267
MAE Metric : 4.97004272043705
== epoch 14 ==
MSE Loss : 98.00410274043679
MAE Metric : 4.947752311825752
== epoch 15 ==
MSE Loss : 94.9954668097198
MAE Metric : 5.866833575069904
2018-04-09
